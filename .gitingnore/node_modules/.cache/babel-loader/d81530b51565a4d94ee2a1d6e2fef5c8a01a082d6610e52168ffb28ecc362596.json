{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('counter/fetchCount', async amount => {\n  const response = await fetchCount(amount);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    logout: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = state => state.user.user; //allows to pull the data when we need to \n\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","userSlice","name","user","reducers","login","state","logout","action","payload","extraReducers","builder","addCase","pending","fulfilled","increment","decrement","incrementByAmount","actions","selectUser","reducer"],"sources":["C:/Users/ocero/Documents/clone/clone-inlinked/src/features/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    logout: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = (state) => state.user.user; //allows to pull the data when we need to \n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,oBAAoB,EACpB,MAAOO,MAAM,IAAK;EAChB,MAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAM,CAAC;EACzC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CAAC,CACF;AAED,OAAO,MAAMC,SAAS,GAAGT,WAAW,CAAC;EACnCU,IAAI,EAAE,MAAM;EACZR,YAAY,EAAE;IACZS,IAAI,EAAE;EACR,CAAC;EACD;EACAC,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAK;MAChB;MACA;MACA;MACA;MACAA,KAAK,CAACX,KAAK,IAAI,CAAC;IAClB,CAAC;IACD;IACAY,MAAM,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACzBF,KAAK,CAACX,KAAK,IAAIa,MAAM,CAACC,OAAO;IAC/B;EACF,CAAC;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,cAAc,CAACgB,OAAO,EAAGP,KAAK,IAAK;MAC1CA,KAAK,CAACV,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDgB,OAAO,CAACf,cAAc,CAACiB,SAAS,EAAE,CAACR,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAACV,MAAM,GAAG,MAAM;MACrBU,KAAK,CAACX,KAAK,IAAIa,MAAM,CAACC,OAAO;IAC/B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEM,SAAS;EAAEC,SAAS;EAAEC;AAAkB,CAAC,GAAGhB,SAAS,CAACiB,OAAO;;AAE5E;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIb,KAAK,IAAKA,KAAK,CAACH,IAAI,CAACA,IAAI,CAAC,CAAC;;AAEtD,eAAeF,SAAS,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}