{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    logout: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = state => state.user.user; //allows to pull the data when we need to \n\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","userSlice","name","initialState","user","reducers","login","state","value","logout","action","payload","extraReducers","builder","addCase","incrementAsync","pending","status","fulfilled","increment","decrement","incrementByAmount","actions","selectUser","reducer"],"sources":["C:/Users/ocero/Documents/clone/clone-inlinked/src/features/userSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    logout: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = (state) => state.user.user; //allows to pull the data when we need to \n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;EACnCE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,IAAI,EAAE;EACR,CAAC;EACD;EACAC,QAAQ,EAAE;IACRC,KAAK,EAAGC,KAAK,IAAK;MAChB;MACA;MACA;MACA;MACAA,KAAK,CAACC,KAAK,IAAI,CAAC;IAClB,CAAC;IACD;IACAC,MAAM,EAAEA,CAACF,KAAK,EAAEG,MAAM,KAAK;MACzBH,KAAK,CAACC,KAAK,IAAIE,MAAM,CAACC,OAAO;IAC/B;EACF,CAAC;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACC,cAAc,CAACC,OAAO,EAAGT,KAAK,IAAK;MAC1CA,KAAK,CAACU,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDH,OAAO,CAACC,cAAc,CAACG,SAAS,EAAE,CAACX,KAAK,EAAEG,MAAM,KAAK;MACpDH,KAAK,CAACU,MAAM,GAAG,MAAM;MACrBV,KAAK,CAACC,KAAK,IAAIE,MAAM,CAACC,OAAO;IAC/B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEQ,SAAS;EAAEC,SAAS;EAAEC;AAAkB,CAAC,GAAGpB,SAAS,CAACqB,OAAO;;AAE5E;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIhB,KAAK,IAAKA,KAAK,CAACH,IAAI,CAACA,IAAI,CAAC,CAAC;;AAEtD,eAAeH,SAAS,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}